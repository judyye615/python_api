# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
 # think of “push” as “trigger” 
  push:
    branches: 
      - 'feature/git_action'
 # “pull_request” as “pr”
  pull_request:
    branches: 
      - 'main'

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8.0
      uses: actions/setup-python@v3
      with:
        python-version: "3.8.0"

    - name: Build Docker Images
      run: |
        docker build -t api-test . 

    - name: Test with pytest
      run: |
     
        docker run --workdir /github/workspace --rm -e INPUT_ARGS -e HOME -e GITHUB_JOB -e GITHUB_REF -e GITHUB_SHA -e GITHUB_REPOSITORY -e GITHUB_REPOSITORY_OWNER -e GITHUB_RUN_ID -e GITHUB_RUN_NUMBER -e GITHUB_RETENTION_DAYS -e GITHUB_RUN_ATTEMPT -e GITHUB_ACTOR -e GITHUB_WORKFLOW -e GITHUB_HEAD_REF -e GITHUB_BASE_REF -e GITHUB_EVENT_NAME -e GITHUB_SERVER_URL -e GITHUB_API_URL -e GITHUB_GRAPHQL_URL -e GITHUB_WORKSPACE -e GITHUB_ACTION -e GITHUB_EVENT_PATH -e GITHUB_ACTION_REPOSITORY -e GITHUB_ACTION_REF -e GITHUB_PATH -e GITHUB_ENV -e RUNNER_OS -e RUNNER_NAME -e RUNNER_TOOL_CACHE -e RUNNER_TEMP -e RUNNER_WORKSPACE -e ACTIONS_RUNTIME_URL -e ACTIONS_RUNTIME_TOKEN -e ACTIONS_CACHE_URL -e GITHUB_ACTIONS=true -e CI=true -e API_TEST="main.py" -v "/home/docker/code":${{ github.workspace }} api-test 
        
        
        
    # docker run --workdir ${{ github.workspace }} --rm -v "/home/docker/code":"/github/workflow" api-test
        
    
    # docker run -e API_TEST="main.py" api-test

    # - name: Copy Container file
    #   run: |
    #      docker ps -aqf "ancestor=api-test"
    #      ID=$(docker ps -aqf "ancestor=api-test")
    #      docker cp $ID:/home/docker/code/reports ${{ github.workspace }}/

    - name: Upload pytest test results
      uses: actions/upload-artifact@v3
      with:
        name: pytest-results
        path: ${{ github.workspace }}/reports
        if-no-files-found: error
      if: ${{ always() }}





    